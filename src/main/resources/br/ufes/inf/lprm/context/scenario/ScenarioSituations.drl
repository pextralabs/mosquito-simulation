package br.ufes.inf.lprm.context.scenario;

import br.ufes.inf.lprm.context.model.*;
import java.util.List;
import java.lang.Double;
import java.lang.Long;
import java.util.Date;
import br.ufes.inf.lprm.scene.model.Situation;
import br.ufes.inf.lprm.situation.bindings.*;
import br.ufes.inf.lprm.situation.model.Participation;
import br.ufes.inf.lprm.situation.model.SituationType
import br.ufes.inf.lprm.scene.util.SituationHelper
import java.util.HashSet
import java.util.Arrays
import java.util.Set;
import org.kie.api.time.SessionClock
import java.time.LocalDateTime
import java.time.Instant
import java.util.TimeZone;

declare NoRecentTemperatureReading extends Situation
    temperature: Temperature @part @key
end
rule NoRecentTemperatureReading
@role(situation) @type(NoRecentTemperatureReading)
    when
        temperature: Temperature(value != null)
        not (ContextUpdate(value == temperature.value) over window:time( 1m30s ))
    then
        SituationHelper.situationDetected(drools);
end

declare ETABiggerThanTTT extends Situation
  person: Person @part @key
  container: Container @part @key
  eta: EstimateTimeOfArrival @part @key
  ttt: TimeToThreshold @part @key
end
rule ETABiggerThanTTT
 @role(situation) @type(ETABiggerThanTTT)
  when
    person: Person()
    batch: Batch(container: container)
    ttt: TimeToThreshold(bearer == batch)
    eta: EstimateTimeOfArrival(person memberOf entities, container memberOf entities, value > ttt.value)
  then
    SituationHelper.situationDetected(drools);
end

declare AllETABiggerThanTTT extends Situation
    batch: Batch @part @key
end
rule AllETABiggerThanTTT
 @role(situation) @type(AllETABiggerThanTTT)
  when
    Watch(person: watcher, batch: target)
    forall (
        Watch(person == watcher, batch == target)
        ETABiggerThanTTT(person == person, active)
    )
  then
  SituationHelper.situationDetected(drools);
end
